<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
from pya import *
import math
from SiEPIC.utils import get_technology, get_technology_by_name
from SiEPIC.scripts import path_to_waveguide
from SiEPIC.extend import to_itype


MODULE_NUMPY = True

dbu = 0.001
#pi = math.pi
class MultiBox_WG(pya.PCellDeclarationHelper):
    def __init__(self):

      # Important: initialize the super class
      super(MultiBox_WG, self).__init__()
      TECHNOLOGY = get_technology_by_name('EBeam')

      # declare the parameters
      self.param("pitch", self.TypeDouble, "Period [um]", default = 0.2)
      self.param("w", self.TypeDouble, "Waveguide Width [um]", default = 0.5)
      #self.param("r", self.TypeDouble, "Radius [um]", default = 5) # minimum radius is 5 um in TE
      self.param("ff", self.TypeDouble, "Duty Cycle", default = 0.5)
      #self.param("angle", self.TypeDouble, "Angle", default = 360)
      self.param("gap", self.TypeDouble, "Row Gap [um]", default = 0.06)
      #self.param("gap2", self.TypeDouble, "Bus Gap [um]", default = 0.06)
      self.param("row", self.TypeDouble, "Number of Rows", default = 1)
      self.param("Length", self.TypeDouble, "SWG-part Length [um]", default = 30)
      self.param("taperL", self.TypeDouble, "Taper Length [um]", default = 10)
      #self.param("doublebus", self.TypeBoolean, "Bus Type (Single=False, Double=True)", default = False)
      self.param("layer", self.TypeLayer, "Layer", default = TECHNOLOGY['Waveguide'])
      self.param("pinrec", self.TypeLayer, "PinRec Layer", default = TECHNOLOGY['PinRec'])
      self.param("devrec", self.TypeLayer, "DevRec Layer", default = TECHNOLOGY['DevRec'])
  #    self.param("textl", self.TypeLayer, "Text Layer", default = LayerInfo(10, 0))
  
    def display_text_impl(self):
      # Provide a descriptive text for the cell
      return "SWG_length_%.3f um (not strip WG included)" % \
      (self.Length)

    def coerce_parameters_impl(self):
       pass

    def can_create_from_shape(self, layout, shape, layer):
        return False
        
    def produce_impl(self):
      from SiEPIC._globals import PIN_LENGTH
      # This is the main part of the implementation: create the layout

      # fetch the parameters
      dbu = self.layout.dbu
      ly = self.layout
      shapes = self.cell.shapes
      LayerSi = self.layer
      LayerSiN = ly.layer(LayerSi)
      LayerPinRecN = ly.layer(self.pinrec)
      LayerDevRecN = ly.layer(self.devrec)
      
      #variables
      pitch = self.pitch
      w = self.w
      #r = self.r
      ff = self.ff
      #angle = self.angle
      gap = self.gap
      #gap2 = self.gap2
      row = self.row
      Length = self.Length
      taperL = self.taperL
      #doublebus = self.doublebus
      #print(doublebus)
      
      if Length &lt;= 30:
        Length = taperL*2+10
        print('invalid length of SWG waveguide, set length at least 2 times larger than the taper length and pluse 10 um')
    
      s1 = pitch*ff #silicon
      s2 = pitch-s1 #gap


      # Draw the first Multi-box Waveguides 
      #calulate ideal length of bus
      bus_length = Length
      #bus_length = self.cell.bbox().height()*dbu +pitch*2
      constant = math.ceil(bus_length/(s1+s2))
      if bus_length % (s1+s2) != 0:
        bus_length = constant*(s1+s2)   
        
      for ii in range(0,int(row)): 
        xo = [(ii*(w+gap)),(w+ii*(w+gap)),(w+ii*(w+gap)),(ii*(w+gap))]
        yo = [0,0,s1,s1]
        dpts=[pya.DPoint(xo[i], yo[i]) for i in range(len(xo))]
        dpolygon = DPolygon(dpts)
        element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
        shapes(LayerSiN).insert(element)   
        
              
        # draw the SWG waveguide from the center one to +/- positions    
        for i in range(0,int(math.ceil((constant)/2))):
          yu = [yo[j]+i*pitch for j in range(len(yo))]
          yd = [yo[j]-i*pitch for j in range(len(yo))]
            
          dpts=[pya.DPoint(xo[i], yu[i]) for i in range(len(xo))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)
          dpts=[pya.DPoint(xo[i], yd[i]) for i in range(len(xo))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)         

        # draw the tapers from waveguide to SWG
        if taperL != 0:
          xtu = [((ii*(w+gap))+(w-0.06)/2),((ii*(w+gap))+(w-0.06)/2+0.06),((ii*(w+gap))+w+gap/2),((ii*(w+gap))-gap/2)]
          ytu = [(yu[3]-taperL),(yu[3]-taperL),(yu[3]),(yu[3])]
          dpts=[pya.DPoint(xtu[i], ytu[i]) for i in range(len(xtu))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)
          
          ytd = [(yd[1]+taperL),(yd[1]+taperL),(yd[1]),(yd[1])]
          dpts=[pya.DPoint(xtu[i], ytd[i]) for i in range(len(xtu))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)
          
          # taper connections from multi-tapers to std WG
          xTu = [(-gap/2),(-gap/2+row*(gap+w)),((row*(gap+w)-gap)/2+0.25),((row*(gap+w)-gap)/2 - 0.25)]
          yTu = [(yu[3]),(yu[3]),(yu[3]+taperL),(yu[3]+taperL)]
          dpts=[pya.DPoint(xTu[i], yTu[i]) for i in range(len(xTu))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)
           
          yTd = [(yd[1]),(yd[1]),(yd[1]-taperL),(yd[1]-taperL)]
          dpts=[pya.DPoint(xTu[i], yTd[i]) for i in range(len(xTu))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)    
          # f is the factor to define the Dev starting point       
          f = 1 
             
             
        if taperL == 0:
          yTd = yd
          yTu = yu
          xTu = [0,0,0,0]
          f = 0
          
      #DEV BOX
      dev = Box(f*(-gap/2)/dbu, yTd[-1]/dbu, self.cell.bbox().width()-f*(gap/2)/dbu,yTu[-1]/dbu)
      shapes(LayerDevRecN).insert(dev)
      dev_width = self.cell.bbox().width()/2
      
      dev_up = yu[-1]/dbu +taperL/dbu 
      dev_down = yd[-4]/dbu - taperL/dbu
      
      
      # Create the pins on the waveguides, as short paths:
      from SiEPIC._globals import PIN_LENGTH as pin_length
  
      w = to_itype(self.w,dbu)
      gap = to_itype(self.gap,dbu)
      bus_length = to_itype(bus_length/2,dbu)

      #Pin1
      t = Trans(Trans.R0, xTu[-1]/dbu+250,dev_up)
      pin = Path([Point(0, -pin_length/2), Point(0, pin_length/2)], 500) #500 is width of std WG
      pin_t = pin.transformed(t)
      shapes(LayerPinRecN).insert(pin_t)
      text = Text ("pin1", t)
      shape = shapes(LayerPinRecN).insert(text)
      shape.text_size = 0.4/dbu

      
      #Pin2
      t = Trans(Trans.R0, xTu[-1]/dbu+250,dev_down)
      pin = Path([Point(0, pin_length/2), Point(0, -pin_length/2)], 500)
      pin_t = pin.transformed(t)
      shapes(LayerPinRecN).insert(pin_t)
      text = Text ("pin2", t)
      shape = shapes(LayerPinRecN).insert(text)
      shape.text_size = 0.4/dbu
      
      
      
      # Create the pins on the waveguides, as short paths:
      from SiEPIC._globals import PIN_LENGTH as pin_length
  
      w = to_itype(self.w,dbu)
      gap = to_itype(self.gap,dbu)
      Length = to_itype(Length/2,dbu)

      
class SiEPIC_EBeam_dev(Library):
  """
  The library where we will put the PCells and GDS into
  """

  def __init__(self):

    tech_name = 'EBeam'
    library = tech_name+'-STEPHDEV-Eluan'

    print("Initializing '%s' Library." % library)


    # Set the description
# windows only allows for a fixed width, short description
    self.description = ""
# OSX does a resizing:
#    self.description = "Beta layouts only"

    # Create the PCell declarations
    self.layout().register_pcell("Multi-Box_WG", MultiBox_WG())

    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

# Setup path to load .py files in present folder:
#import os, inspect, sys
#path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
#if not path in sys.path:
#  sys.path.append(path)

# Instantiate and register the library
SiEPIC_EBeam_dev()
      </text>
</klayout-macro>
