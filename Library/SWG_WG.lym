<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
from pya import *
import math
from SiEPIC.utils import get_technology, get_technology_by_name
from SiEPIC.scripts import path_to_waveguide
from SiEPIC.extend import to_itype


MODULE_NUMPY = True

dbu = 0.001

class SWG_WG(pya.PCellDeclarationHelper):
    def __init__(self):

      # Important: initialize the super class
      super(SWG_WG, self).__init__()
      TECHNOLOGY = get_technology_by_name('EBeam')

      # declare the parameters
      self.param("pitch", self.TypeDouble, "Period [um]", default = 0.24)
      self.param("ff", self.TypeDouble, "Duty Cycle", default = 0.5)
      self.param("w", self.TypeDouble, "SWG-WG Width [um]", default = 0.5)
      self.param("Length", self.TypeDouble, "SWG-WG Length [um]", default = 10)
      self.param("layer", self.TypeLayer, "Layer", default = TECHNOLOGY['Waveguide'])
      self.param("pinrec", self.TypeLayer, "PinRec Layer", default = TECHNOLOGY['PinRec'])
      self.param("devrec", self.TypeLayer, "DevRec Layer", default = TECHNOLOGY['DevRec'])

  
    def display_text_impl(self):
      # Provide a descriptive text for the cell
      return "SWG_length_%.3f um" % \
      (self.Length)

    def coerce_parameters_impl(self):
       pass

    def can_create_from_shape(self, layout, shape, layer):
        return False
        
    def produce_impl(self):
      from SiEPIC._globals import PIN_LENGTH
      # This is the main part of the implementation: create the layout

      # fetch the parameters
      dbu = self.layout.dbu
      ly = self.layout
      shapes = self.cell.shapes
      LayerSi = self.layer
      LayerSiN = ly.layer(LayerSi)
      LayerPinRecN = ly.layer(self.pinrec)
      LayerDevRecN = ly.layer(self.devrec)
      
      #variables
      pitch = self.pitch
      w = self.w
      ff = self.ff
      Length = self.Length
      
      s1 = pitch*ff #silicon
      s2 = pitch-s1 #gap
      
      if Length &lt;= 2*pitch:
        Length = pitch*3
        print('invalid length of SWG waveguide, set length at least 3*period of SWG')
    



      # Draw the first SWG-block Waveguides 
      #calulate ideal pitch of bus
      bus_length = Length
      constant = math.ceil(bus_length/(s1+s2)) # ceil is the larger integer
      if bus_length % (s1+s2) != 0:
        #bus_length = constant*(s1+s2)   
        s11=(bus_length/(constant))*ff
        s22 = (bus_length/(constant))*(1-ff)
        pitch1 = s11+s22
        

        yo = [0,0,w,w]
        xo = [0,s11,s11,0]
        dpts=[pya.DPoint(xo[i], yo[i]) for i in range(len(xo))]
        dpolygon = DPolygon(dpts)
        element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
        shapes(LayerSiN).insert(element)   
        
        # draw the SWG waveguide from the center one to +/- positions    
        for i in range(0,int(math.ceil(constant))):
          xnext = [xo[j]+i*pitch1 for j in range(len(xo))]
          #yd = [yo[j]-i*pitch for j in range(len(yo))]
            
          dpts=[pya.DPoint(xnext[i], yo[i]) for i in range(len(xnext))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)        
    
      #DEV BOX
      dev = Box(0,0, self.cell.bbox().width()+((s2)/dbu),w/dbu)
      shapes(LayerDevRecN).insert(dev)
      
      
      # Create the pins on the waveguides, as short paths:
      #from SiEPIC._globals import PIN_LENGTH as pin_length
      pin_length = (s2/2)/dbu
      #w = to_itype(self.w,dbu) 
  
      #Pin1
      t = Trans(Trans.R90, -(s2/2)/dbu,(w/2)/dbu)
      pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
      pin_t = pin.transformed(t)
      shapes(LayerPinRecN).insert(pin_t)
      text = Text ("pin1", t)
      shape = shapes(LayerPinRecN).insert(text)
      shape.text_size = 0.4/dbu
      
      # Pin2
      t = Trans(Trans.R90, Length/dbu-(s22)/dbu+(s2/2)/dbu,(w/2)/dbu)
      pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
      pin_t = pin.transformed(t)
      shapes(LayerPinRecN).insert(pin_t)
      text = Text ("pin2", t)
      shape = shapes(LayerPinRecN).insert(text)
      shape.text_size = 0.4/dbu
            



class SiEPIC_EBeam_dev(Library):
  """
  The library where we will put the PCells and GDS into
  """

  def __init__(self):

    tech_name = 'EBeam'
    library = tech_name+'-STEPHDEV-Eluan'

    print("Initializing '%s' Library." % library)


    # Set the description
# windows only allows for a fixed width, short description
    self.description = ""
# OSX does a resizing:
#    self.description = "Beta layouts only"

    # Create the PCell declarations
    self.layout().register_pcell("SWG_WG", SWG_WG())

    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

# Setup path to load .py files in present folder:
#import os, inspect, sys
#path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
#if not path in sys.path:
#  sys.path.append(path)

# Instantiate and register the library
SiEPIC_EBeam_dev()
      

</text>
</klayout-macro>
