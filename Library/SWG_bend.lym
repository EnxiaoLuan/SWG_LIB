<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
from pya import *
import math
from SiEPIC.utils import get_technology, get_technology_by_name
from SiEPIC.scripts import path_to_waveguide
from SiEPIC.extend import to_itype


MODULE_NUMPY = True

dbu = 0.001

class SWG_bend(pya.PCellDeclarationHelper):
    def __init__(self):

      # Important: initialize the super class
      super(SWG_bend, self).__init__()
      TECHNOLOGY = get_technology_by_name('EBeam')
      
      # declare the parameters
      self.param("pitch", self.TypeDouble, "Period [um]", default = 0.2)
      self.param("ff", self.TypeDouble, "Duty Cycle", default = 0.5)
      self.param("w", self.TypeDouble, "SWG-WG Width [um]", default = 0.5)
      self.param("r", self.TypeDouble, "Radius [um]", default = 10)
      #self.param("angle", self.TypeDouble, "Angle", default = 360)
      self.param("angle", self.TypeBoolean, "Bend Type (1/4 Bend=False, 1/2Bend=True)", default = False)
      self.param("layer", self.TypeLayer, "Layer", default = TECHNOLOGY['Waveguide'])
      self.param("pinrec", self.TypeLayer, "PinRec Layer", default = TECHNOLOGY['PinRec'])
      self.param("devrec", self.TypeLayer, "DevRec Layer", default = TECHNOLOGY['DevRec'])
      
    def display_text_impl(self):
      # Provide a descriptive text for the cell
      return "SWG_bend_%.3f" % \
      (self.r)

    def coerce_parameters_impl(self):
      pass

    def can_create_from_shape(self, layout, shape, layer):
      return False
    def produce_impl(self):
      from SiEPIC._globals import PIN_LENGTH
      # This is the main part of the implementation: create the layout

      # fetch the parameters
      dbu = self.layout.dbu
      ly = self.layout
      shapes = self.cell.shapes
      LayerSi = self.layer
      LayerSiN = ly.layer(LayerSi)
      LayerPinRecN = ly.layer(self.pinrec)
      LayerDevRecN = ly.layer(self.devrec)

      #variables
      pitch = self.pitch
      w = self.w
      r = self.r
      ff = self.ff
      angle = self.angle
      
      if angle is True:
        angle_num = 180
      else:
        angle_num = 90
      
      
      #define the radius of the SWG-bend
      if (r &lt;= 10):
        r = 10
        print ('invalid radius, set r to default: 10 [um]')

      #Calculate number of segments
      s1 = pitch*ff #silicon
      s2 = pitch-s1 #gap
      
      #calculate best radius
      const = math.ceil(2*pi*r/(s1+s2))
      #if doesn't divide evenly, replace r with best possible r
      if ((2*pi*r)%(s1+s2) != 0):
        r = const*(s1+s2)/(2*pi)
        print('r adjusted to '+str(r)+'um to fit periods perfectly.')
        
      #define the angle of each Si block  
      theta1 = math.atan(s1/(2*r))
      theta2 = math.atan(s2/(2*r))
      nSeg = int(math.ceil(angle_num/(2*(math.degrees(theta1)+math.degrees(theta2))))) #how many segments to have (floor is the smaller integer, ceil is the bigger integer)
      si_first = True #for alternating between silicon and gap
      j=0 #index of how many silicon thetas 
      jj = 0 #index of how many gap thetas
      ORDER = True #ordering of the coordinates for polygon drawing
     
      xo = [(r-w/2)*math.cos(0)]
      yo = [(r-w/2)*math.sin(0)]
      xo.append((r+w/2)*math.cos(0))
      yo.append((r+w/2)*math.sin(0)) 
      
      for i in range(0,nSeg*2):
          if si_first:
              j = j+1
              si_first = not(si_first)
          else:
              jj=jj+1
              si_first = not(si_first)
          
          if ORDER: 
            xo.append((r+w/2)*math.cos(2*j*theta1+2*jj*theta2))
            yo.append((r+w/2)*math.sin(2*j*theta1+2*jj*theta2))
            xo.append((r-w/2)*math.cos(2*j*theta1+2*jj*theta2))
            yo.append((r-w/2)*math.sin(2*j*theta1+2*jj*theta2))
            ORDER = not(ORDER)
          else:
            xo.append((r-w/2)*math.cos(2*j*theta1+2*jj*theta2))
            yo.append((r-w/2)*math.sin(2*j*theta1+2*jj*theta2))
            xo.append((r+w/2)*math.cos(2*j*theta1+2*jj*theta2))
            yo.append((r+w/2)*math.sin(2*j*theta1+2*jj*theta2))
            ORDER = not(ORDER)       
            
          if len(xo) == 4:
            dpts=[pya.DPoint(xo[i], yo[i]) for i in range(len(xo))]
            dpolygon = DPolygon(dpts)
            element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
            shapes(LayerSiN).insert(element)
            xo = []
            yo = []   
      xT=(r+w/2)*math.cos(nSeg*(2*theta1+2*theta2)-theta2) # math.cos(in Rad unit, not deg)
      yT=(r+w/2)*math.sin(nSeg*(2*theta1+2*theta2)-theta2)




      #DEV BOX
      if angle is False:
        dev_width = self.cell.bbox().width()
        dev = Box(xT/dbu,r/dbu+(w/2)/dbu,r/dbu+(w/2)/dbu,(-s2/2)/dbu)
        shapes(LayerDevRecN).insert(dev)
        dev_width = self.cell.bbox().width()/2

        # Create the pins on the waveguides, as short paths:
        from SiEPIC._globals import PIN_LENGTH as pin_length
        pin_length = (s2/2)/dbu
        #w = to_itype(self.w,dbu) 
            
        #Pin1
        t = Trans(Trans.R0, r/dbu,-(s2/2)/dbu ) # Trans.R0 and R90 is 90 deg rotation
        pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
        pin_t = pin.transformed(t)
        shapes(LayerPinRecN).insert(pin_t)
        text = Text ("pin1", t)
        shape = shapes(LayerPinRecN).insert(text)
        shape.text_size = 0.4/dbu
          
        #Pin2
        t = Trans(Trans.R90, xT/dbu, r/dbu)
        pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
        pin_t = pin.transformed(t)
        shapes(LayerPinRecN).insert(pin_t)
        text = Text ("pin2", t)
        shape = shapes(LayerPinRecN).insert(text)
        shape.text_size = 0.4/dbu          
        

        
      if angle is True:
        dev = Box(-(r/dbu+(w/2)/dbu),r/dbu+(w/2)/dbu,r/dbu+(w/2)/dbu,(-s2/2)/dbu)
        shapes(LayerDevRecN).insert(dev)
        dev_width = self.cell.bbox().width()/2
        # Create the pins on the waveguides, as short paths:
        from SiEPIC._globals import PIN_LENGTH as pin_length
    
        pin_length = (s2/2)/dbu
        #w = to_itype(self.w,dbu) 

    
        #Pin1
        t = Trans(Trans.R0, r/dbu,-(s2/2)/dbu )
        pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
        pin_t = pin.transformed(t)
        shapes(LayerPinRecN).insert(pin_t)
        text = Text ("pin1", t)
        shape = shapes(LayerPinRecN).insert(text)
        shape.text_size = 0.4/dbu
          
        #Pin2
        t = Trans(Trans.R0, -r/dbu,yT/dbu )
        pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
        pin_t = pin.transformed(t)
        shapes(LayerPinRecN).insert(pin_t)
        text = Text ("pin2", t)
        shape = shapes(LayerPinRecN).insert(text)
        shape.text_size = 0.4/dbu          



            
class SiEPIC_EBeam_dev(Library):
  """
  The library where we will put the PCells and GDS into
  """

  def __init__(self):

    tech_name = 'EBeam'
    library = tech_name+'-STEPHDEV-Eluan'

    print("Initializing '%s' Library." % library)


    # Set the description
# windows only allows for a fixed width, short description
    self.description = ""
# OSX does a resizing:
#    self.description = "Beta layouts only"

    # Create the PCell declarations
    self.layout().register_pcell("SWG_bend", SWG_bend())

    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

# Setup path to load .py files in present folder:
#import os, inspect, sys
#path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
#if not path in sys.path:
#  sys.path.append(path)

# Instantiate and register the library
SiEPIC_EBeam_dev()
                  </text>
</klayout-macro>
