<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
from pya import *
import math
from SiEPIC.utils import get_technology, get_technology_by_name
from SiEPIC.scripts import path_to_waveguide
from SiEPIC.extend import to_itype


MODULE_NUMPY = True

dbu = 0.001

class SWG_edgecoupler(pya.PCellDeclarationHelper):
    def __init__(self):

      # Important: initialize the super class
      super(SWG_edgecoupler, self).__init__()
      TECHNOLOGY = get_technology_by_name('EBeam')

      # declare the parameters

      self.param("layer", self.TypeLayer, "Layer", default = TECHNOLOGY['Waveguide'])
      self.param("pinrec", self.TypeLayer, "PinRec Layer", default = TECHNOLOGY['PinRec'])
      self.param("devrec", self.TypeLayer, "DevRec Layer", default = TECHNOLOGY['DevRec'])



    def coerce_parameters_impl(self):
       pass

    def can_create_from_shape(self, layout, shape, layer):
        return False
        
    def produce_impl(self):
      from SiEPIC._globals import PIN_LENGTH
      # This is the main part of the implementation: create the layout

      # fetch the parameters
      dbu = self.layout.dbu
      ly = self.layout
      shapes = self.cell.shapes
      LayerSi = self.layer
      LayerSiN = ly.layer(LayerSi)
      LayerPinRecN = ly.layer(self.pinrec)
      LayerDevRecN = ly.layer(self.devrec)
      

      
      
      # pitch of the output of the edge coupler at w1 = 0.5
      pitch1=0.24
      s1 = 0.12
      w1 = 0.5
      # pitch of the input of the edge coupler at w2 = 0.22 
      pitch2=0.4
      s2 = 0.2
      w2 = 0.22
      # duty cycle
      ff = 0.5
      # Length of the edge coupler
      Length = 80
      
# draw the edge coupler
      
      # the first block
      xo = [0,s1,s1,0]
      yo = [0,0,w1,w1]
      dpts=[pya.DPoint(xo[i], yo[i]) for i in range(len(xo))]
      dpolygon = DPolygon(dpts)
      element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
      shapes(LayerSiN).insert(element)   
      
      #how many SWG periods in the coupler
      constant = math.ceil(Length/((pitch1+pitch2)/2))
      ydelta = ((w1-w2)/2)/(constant-1) 
      xnext = xo

      
      for ii in range(0,int(constant)):

        s1 = s1+ ((s2-0.12)/(constant-1))
        xnext = [xnext[0]+2*s1, xnext[1]+2*s1+(s2-0.12)/(constant-1), xnext[2]+2*s1+(s2-0.12)/(constant-1), xnext[3]+2*s1]
        ynext = [yo[0]+ii*ydelta, yo[1]+ii*ydelta, yo[2]-ii*ydelta, yo[3]-ii*ydelta]
        dpts=[pya.DPoint(xnext[i], ynext[i]) for i in range(len(xo))]
        dpolygon = DPolygon(dpts)
        element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
        shapes(LayerSiN).insert(element)

      #DEV BOX
      dev = Box(0, 0, self.cell.bbox().width(),w1/dbu)
      shapes(LayerDevRecN).insert(dev)
      
      # Create the pins on the waveguides, as short paths:
      #from SiEPIC._globals import PIN_LENGTH as pin_length
      pin_length = (0.12/2)/dbu
      Length = to_itype(Length/2,dbu)
      print(pin_length)
      #Pin1
      t = Trans(Trans.R90, 0-(0.12/2)/dbu,(w1/2)/dbu)
      pin = Path([Point(0, -pin_length), Point(0, pin_length)], w1/dbu) 
      pin_t = pin.transformed(t)
      shapes(LayerPinRecN).insert(pin_t)
      text = Text ("pin1", t)
      shape = shapes(LayerPinRecN).insert(text)
      shape.text_size = 0.4/dbu


     
      
class SiEPIC_EBeam_ELUAN(Library):
  """
  The library where we will put the PCells and GDS into
  """

  def __init__(self):

    tech_name = 'EBeam'
    library = tech_name+'-STEPHDEV-Eluan'

    print("Initializing '%s' Library." % library)


    # Set the description
# windows only allows for a fixed width, short description
    self.description = ""
# OSX does a resizing:
#    self.description = "Beta layouts only"

    # Create the PCell declarations
    self.layout().register_pcell("SWG_edgecoupler", SWG_edgecoupler()) ## change the name for the specific compount

    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

# Setup path to load .py files in present folder:
#import os, inspect, sys
#path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
#if not path in sys.path:
#  sys.path.append(path)

# Instantiate and register the library
SiEPIC_EBeam_ELUAN()

</text>
</klayout-macro>
