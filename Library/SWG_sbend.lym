<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
from pya import *
import math
from SiEPIC.utils import get_technology, get_technology_by_name
from SiEPIC.scripts import path_to_waveguide
from SiEPIC.extend import to_itype


MODULE_NUMPY = True

dbu = 0.001

class SWG_sbend(pya.PCellDeclarationHelper):
    def __init__(self):

      # Important: initialize the super class
      super(SWG_sbend, self).__init__()
      TECHNOLOGY = get_technology_by_name('EBeam')    

    # declare the parameters
      self.param("length", self.TypeDouble, "S-bend lateral length [um]", default = 25.0)     
      self.param("height", self.TypeDouble, "Waveguide offset height [um]", default = 3)     
      self.param("wg_width", self.TypeDouble, "Waveguide width [um]", default = 0.5)     
      self.param("radius", self.TypeDouble, "Waveguide bend radius [um]", default = 20)
      self.param("pitch", self.TypeDouble, "SWG pitch [um]", default = 0.24)        
      self.param("ff", self.TypeDouble, "SWG duty cycle", default = 0.5)    
      self.param("layer", self.TypeLayer, "Layer", default = TECHNOLOGY['Si'])
      self.param("pinrec", self.TypeLayer, "PinRec Layer", default = TECHNOLOGY['PinRec'])
      self.param("devrec", self.TypeLayer, "DevRec Layer", default = TECHNOLOGY['DevRec'])
    
    def display_text_impl(self):
    # Provide a descriptive text for the cell
      return "SWG_SBend: Total length %s um, S-bend radius %.3f um, Offset-height %s um" % \
      (self.length, self.radius, self.height)
  
    def coerce_parameters_impl(self):
      pass
    
    def can_create_from_shape(self, layout, shape, layer):
      return False
    
    def produce_impl(self):
      from SiEPIC._globals import PIN_LENGTH
# This is the main part of the implementation: create the layout  
    # fetch the parameters
      dbu = self.layout.dbu
      ly = self.layout
      shapes = self.cell.shapes

    #def can_create_from_shape(self, layout, shape, layer):
      #return False   
    
#from SiEPIC.utils import points_per_circle

      LayerSi = self.layer
      LayerSiN = ly.layer(LayerSi)
      #LayerSiSPN = ly.layer(LayerSiSP)
      LayerPinRecN = ly.layer(self.pinrec)
      LayerDevRecN = ly.layer(self.devrec)
      LayerTextN = ly.layer(get_technology()['Text'])

    
      length = self.length
      w = self.wg_width 
      r = self.radius
      h = self.height 
      ff = self.ff 
      pitch = self.pitch 
      
      theta = math.acos((r+w/2-abs(h/2))/r)*180/pi # in the unit of degree
      #theta = math.degrees(acos((r-abs(h/2))/r))
      x = 2*r*math.sin(theta/180.0*pi) # x is the distance of the bending part
      straight_l = (length - x)/2 # the straight waveguide part on each part

      
# define the cell origin as the left side of the waveguide sbend 
      if (straight_l &gt;= 0):
        straight_const=math.ceil(straight_l/pitch)
        # slightly adjust the pitch of each SWG period
        s11 = (straight_l/(straight_const))*ff
        s22 = (straight_l/(straight_const))*(1-ff)
        
        xo=[0,s11,s11,0]
        yo=[0,0,w,w]
        dpts=[pya.DPoint(xo[i], yo[i]) for i in range(len(xo))]
        dpolygon = DPolygon(dpts)
        element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
        shapes(LayerSiN).insert(element) 
         
# draw the straight waveguide on the bottom left        
        for ii in range(0,int(straight_const)): # range must is the integer, so put int() first
          xnext = [xo[j]+ii*(s11+s22) for j in range(len(xo))]
            
          dpts=[pya.DPoint(xnext[i], yo[i]) for i in range(len(xnext))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element)       

# draw the bend part 

        bend_const = math.ceil(2*pi*r*(theta/360)/pitch)

        if ((2*pi*r*(theta/360))%(pitch) != 0):
          sr1 = (2*pi*r*(theta/360)/(bend_const))*ff
          sr2 = (2*pi*r*(theta/360)/(bend_const))*(1-ff)
          
          print('pitch adjusted to '+str((sr1+sr2))+' um to fit bend perfectly.')
        
      #define the angle of each Si block  
          theta1 = math.atan(sr1/(2*r))
          theta2 = math.atan(sr2/(2*r))

          nSeg = int(math.floor(theta/(2*math.degrees(theta1)+2*math.degrees(theta2)))) #how many segments to have (floor is the smaller integer, ceil is the bigger integer)
          
          # adjust the theta values
          theta1 = (((theta-math.degrees(theta2))/nSeg)*pi/360)*ff
          theta2 = (((theta-math.degrees(theta2))/nSeg)*pi/360)*(1-ff)
                 
          si_first = True #for alternating between silicon and gap
          j=0 #index of how many silicon thetas 
          jj = 0 #index of how many gap thetas
          ORDER = True #ordering of the coordinates for polygon drawing

          xr = [(xnext[0]+sr2+sr1)] # require [] to defign x a matrix for further append function
          yr = [(w)]
          xr.append(xnext[3]+sr1+sr2)
          yr.append(0) 

          for i in range(0,nSeg*2):
            if si_first:
                j = j+1
                si_first = not(si_first)
            else:
                jj=jj+1
                si_first = not(si_first)
            
            if ORDER: 
              xr.append(xnext[0]+sr1+sr2+(r+w/2)*math.sin(2*j*theta1+2*jj*theta2))
              yr.append(r+w/2-(r+w/2)*math.cos(2*j*theta1+2*jj*theta2))
              xr.append(xnext[0]+sr1+sr2+(r-w/2)*math.sin(2*j*theta1+2*jj*theta2))
              yr.append(r+w/2-(r-w/2)*math.cos(2*j*theta1+2*jj*theta2))
              ORDER = not(ORDER)
            else:
              xr.append(xnext[0]+sr1+sr2+(r-w/2)*math.sin(2*j*theta1+2*jj*theta2))
              yr.append(r+w/2-(r-w/2)*math.cos(2*j*theta1+2*jj*theta2))
              xr.append(xnext[0]+sr1+sr2+(r+w/2)*math.sin(2*j*theta1+2*jj*theta2))
              yr.append(r+w/2-(r+w/2)*math.cos(2*j*theta1+2*jj*theta2))
              ORDER = not(ORDER)       
              
            if len(xr) == 4:
              dpts=[pya.DPoint(xr[i], yr[i]) for i in range(len(xr))]
              dpolygon = DPolygon(dpts)
              element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
              shapes(LayerSiN).insert(element)
              xr = []
              yr = [] 
###################################################              
# draw the other symmetric part
        xor=[length,length-s11,length-s11,length]
        yor=[h-w,h-w,h,h]
        dpts=[pya.DPoint(xor[i], yor[i]) for i in range(len(xo))]
        dpolygon = DPolygon(dpts)
        element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
        shapes(LayerSiN).insert(element)     
                        
# draw the straight waveguide on the bottom left        
        for ii in range(0,int(straight_const)): # range must is the integer, so put int() first
          xnext = [xor[j]-ii*(s11+s22) for j in range(len(xor))]
            
          dpts=[pya.DPoint(xnext[i], yor[i]) for i in range(len(xnext))]
          dpolygon = DPolygon(dpts)
          element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
          shapes(LayerSiN).insert(element) 
       
        
# draw the other part circle
        xrr = [(xnext[1]-(sr2))] # require [] to defign x a matrix for further append function
        yrr = [(h-w)]
        xrr.append(xnext[1]-(sr2))
        yrr.append(h) 
        si_first = False #for alternating between silicon and gap
        j=0 #index of how many silicon thetas 
        jj = 0 #index of how many gap thetas
        ORDER = False #ordering of the coordinates for polygon drawing

        
        for i in range(0,(nSeg+1)*2): # the right-top one have one more period to add the center SWG block in the s-shape
          if si_first:
              j = j+1
              si_first = not(si_first)
          else:
              jj=jj+1
              si_first = not(si_first)
          
          if ORDER: 
            xrr.append(xnext[1]-(sr2)-(r-w/2)*math.sin(2*j*theta1+2*jj*theta2))
            yrr.append(h-w-((r-w/2)-(r-w/2)*math.cos(2*j*theta1+2*jj*theta2)))
            xrr.append(xnext[1]-(sr2)-(r+w/2)*math.sin(2*j*theta1+2*jj*theta2))
            yrr.append(h-((r+w/2)-(r+w/2)*math.cos(2*j*theta1+2*jj*theta2)))
                        
            ORDER = not(ORDER)
            
          else:
            xrr.append(xnext[1]-(sr2)-(r+w/2)*math.sin(2*j*theta1+2*jj*theta2))
            yrr.append(h-((r+w/2)-(r+w/2)*math.cos(2*j*theta1+2*jj*theta2)))
            xrr.append(xnext[1]-(sr2)-(r-w/2)*math.sin(2*j*theta1+2*jj*theta2))
            yrr.append(h-w-((r-w/2)-(r-w/2)*math.cos(2*j*theta1+2*jj*theta2)))
            
            ORDER = not(ORDER)       
            
          if len(xrr) == 4:
            dpts=[pya.DPoint(xrr[i], yrr[i]) for i in range(len(xrr))]
            dpolygon = DPolygon(dpts)
            element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
            shapes(LayerSiN).insert(element)
            xrr = []
            yrr = [] 

      #DEV BOX
      dev = Box(0,0, self.cell.bbox().width(),h/dbu)
      shapes(LayerDevRecN).insert(dev)
      
      # Create the pins on the waveguides, as short paths:
      #from SiEPIC._globals import PIN_LENGTH as pin_length
      s2 = pitch*(1-ff)
      pin_length = (s2/2)/dbu
      #w = to_itype(self.w,dbu) 
  
      #Pin1
      t = Trans(Trans.R90, -(s2/2)/dbu,(w/2)/dbu)
      pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
      pin_t = pin.transformed(t)
      shapes(LayerPinRecN).insert(pin_t)
      text = Text ("pin1", t)
      shape = shapes(LayerPinRecN).insert(text)
      shape.text_size = 0.4/dbu
      
      # Pin2
      t = Trans(Trans.R90, length/dbu+(s2/2)/dbu,(h-w/2)/dbu)
      pin = Path([Point(0, -pin_length), Point(0, pin_length)], w/dbu) 
      pin_t = pin.transformed(t)
      shapes(LayerPinRecN).insert(pin_t)
      text = Text ("pin2", t)
      shape = shapes(LayerPinRecN).insert(text)
      shape.text_size = 0.4/dbu     
          
        
class SiEPIC_EBeam_dev(Library):
  """
  The library where we will put the PCells and GDS into
  """

  def __init__(self):

    tech_name = 'EBeam'
    library = tech_name+'-STEPHDEV-Eluan'

    print("Initializing '%s' Library." % library)


    # Set the description
# windows only allows for a fixed width, short description
    self.description = ""
# OSX does a resizing:
#    self.description = "Beta layouts only"

    # Create the PCell declarations
    self.layout().register_pcell("SWG_sbend", SWG_sbend())

    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

# Setup path to load .py files in present folder:
#import os, inspect, sys
#path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
#if not path in sys.path:
#  sys.path.append(path)

# Instantiate and register the library
SiEPIC_EBeam_dev()
      

        </text>
</klayout-macro>
